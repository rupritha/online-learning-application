{"file":"sc-address2.js","mappings":";;;;;;;;;;;;;;;;;SAKgB,iBAAiB,CAAC,WAAmB,EAAE,oBAAoD,EAAE,aAAwC;IACnJ,MAAM,MAAM,GAAG,oBAAoB,IAAI,EAAE,CAAC;IAC1C,MAAM,eAAe,GAAG,aAAa,IAAI,EAAE,CAAC;IAE5C,IAAI,WAAW,KAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,WAAW,CAAC,CAAA,EAAE;QACjD,MAAM,CAAC,OAAO,CAAC,KAAK;;YAClB,IAAI,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,WAAW,CAAC,0CAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,EAAE;gBACjD,MAAM,YAAY,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9D,KAAK,CAAC,QAAQ,GAAG,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,MAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,CAAA,CAAC;gBAC3D,KAAK,CAAC,KAAK,GAAG,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,KAAK,MAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,CAAA,CAAC;aACnD;SACF,CAAC,CAAC;KACJ;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;AACxD;;ACpBA;;;AAWA,MAAM,EAAE,IAAI,EAAE,GAAG,kBAAkB,EAAE,CAAC;AAOtC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,WAAW,CAC5D;IACE,aAAa,EAAE,EAAE;IACjB,oBAAoB,EAAE,EAAE;IACxB,GAAG,IAAI;CACR,EACD,CAAC,QAAQ,EAAE,QAAQ;IACjB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC/D,CAAC,CACF;;AC3BD,MAAM,YAAY,GAAG,mjBAAmjB,CAAC;AACzkB,wBAAe,YAAY;;MCgCd,SAAS;;;;;;;uBAIiC;YACnD,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,IAAI;YACZ,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,IAAI;SACZ;qBAEiC;YAChC,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE,kBAAkB;YAC3B,IAAI,EAAE,eAAe;YACrB,MAAM,EAAE,iBAAiB;YACzB,MAAM,EAAE,iBAAiB;YACzB,WAAW,EAAE,sBAAsB;YACnC,KAAK,EAAE,gBAAgB;SACxB;uBAG0B,KAAK;;;;;wBAea,KAAK;2BAGF,KAAK;;;wBASxB,IAAI;0BAGF,IAAI;;8BAMgC,cAAc;;;IAUjF,mBAAmB;;QACjB,IAAI,EAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,CAAA;YAAE,OAAO;QACnC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACxC;IAGD,gBAAgB;QACd,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB;KACF;IAED,kBAAkB,CAAC,IAAY;;QAC7B,OAAO,CAAA,MAAA,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC,0CAAE,IAAI,CAAC,WAAW,KAAI,IAAI,CAAC;KACrF;IAED,aAAa,CAAC,OAAyB;QACrC,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;KAChD;IAED,kBAAkB,CAAC,OAAyB;QAC1C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;KAC3D;IAED,YAAY;;QACV,IAAI,CAAC,OAAO,GAAG;YACb,IAAI,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI;YACxB,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,IAAI;YACZ,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,IAAI;SACZ,CAAC;KACH;;IAGD,UAAU;QACR,OAAO,WAAqB,CAAC,CAAC,IAAI,CAAC,MAAM;;YACvC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,0CAAG,CAAC,CAAC,KAAI,EAAE,EAAE,GAAG,CAAC,MAAM,KAAK;gBACxE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;gBAChB,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC1C,CAAC,CAAC,CAAC;YAEJ,IAAK,MAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,EAAE,0CAAE,KAAK,0CAAE,YAAY,EAAG;gBACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,0BAA0B,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAA4C,CAAC;aACxJ;SACF,CAAC,CAAC;KACJ;IAED,iBAAiB;;QACf,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,OAAO,GAAG,CAAA,MAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,cAAI,OAAA,OAAO,CAAC,KAAK,MAAK,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,CAAA,CAAA,EAAA,CAAC,0CAAE,KAAK,KAAI,IAAI,CAAC;;QAG5G,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,IAAIA,KAAS,CAAC,oBAAoB,IAAI,EAAE,CAAC;QAC9F,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAIA,KAAS,CAAC,aAAa,IAAI,EAAE,CAAC;QAEzE,IAAI,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAGD,MAAM,cAAc;QAClB,OAAO,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACxC;;;;;IAMD,YAAY;;QACV,MAAM,qBAAqB,GAAG,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,CAAC,KAAI,EAAE,CAAC;QAChF,MAAM,mBAAmB,GAAG,CAAC,IAAI,CAAC,oBAAoB,IAAI,EAAE,EAAE,GAAG,CAAC,KAAK;YACrE,IAAI,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACrC,OAAO;oBACL,GAAG,KAAK;oBACR,GAAG,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC;iBACrC,CAAC;aACH;YACD,OAAO,KAAK,CAAC;SACd,CAAC,CAAC;QAEH,OAAO,iBAAiB,CAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,EAAE,mBAAmB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;KAC1F;IAED,eAAe,CAAC,KAAa,EAAE,MAAc;QAC3C,MAAM,OAAO,GAAG,KAAK,KAAK,CAAC,CAAC;QAC5B,MAAM,MAAM,GAAG,KAAK,KAAK,MAAM,GAAG,CAAC,CAAC;QAEpC,OAAO;YACL,UAAU,EAAE,MAAM;YAClB,aAAa,EAAE,OAAO;YACtB,OAAO,EAAE,CAAC,MAAM,IAAI,CAAC,OAAO;SAC7B,CAAC;KACH;IAED,MAAM;;QACJ,MAAM,aAAa,GAAG,CAAC,MAAA,IAAI,CAAC,YAAY,EAAE,mCAAI,EAAE,EAAE,MAAM,CAAC,KAAK;;YAC5D,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,MAAM;oBACT,OAAO,IAAI,CAAC,QAAQ,CAAC;gBACvB,KAAK,WAAW;oBACd,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,EAAC,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,MAAM,0CAAE,MAAM,CAAA,CAAC;gBAC3D,KAAK,MAAM;oBACT,OAAO,IAAI,CAAC,QAAQ,CAAC;gBACvB,KAAK,OAAO;oBACV,OAAO,CAAC,EAAC,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,MAAM,CAAA,IAAI,CAAC,EAAC,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,OAAO,CAAA,CAAC;gBAC7D,KAAK,UAAU;oBACb,OAAO,IAAI,CAAC,UAAU,CAAC;gBACzB;oBACE,OAAO,IAAI,CAAC;aACf;SACF,CAAC,CAAC;QAEH,QACE,WAAK,KAAK,EAAC,YAAY,EAAC,IAAI,EAAC,MAAM,IACjC,uBAAiB,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,WAAW,EAAC,gCAAgC,EAAC,KAAK,EAAC,qBAAqB,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,IACjI,aAAa,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,KAAa;;YAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;YAEvE,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,SAAS;oBACZ,QACE,iBACE,WAAW,EAAC,sKAAsK,EAClL,IAAI,EAAC,aAAa,EAClB,KAAK,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,EAC5B,UAAU,EAAE,CAAC,CAAM;;4BACjB,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,MAAK,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,CAAA;gCAAE,OAAO;4BACrD,IAAI,CAAC,YAAY,EAAE,CAAC;4BACpB,IAAI,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;yBACjD,EACD,OAAO,EAAE,IAAI,CAAC,cAAc,EAC5B,YAAY,EAAE,cAAc,EAC5B,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,OAAO,EACzB,MAAM,QACN,QAAQ,EAAE,KAAK,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,gBACX,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ,KAAK,MAAM;oBACT,QACE,gBACE,WAAW,EAAC,yDAAyD,EACrE,KAAK,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,IAAI,EAC1B,UAAU,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAC5E,SAAS,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAChF,YAAY,EAAC,gBAAgB,EAC7B,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,IAAI,EACtB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,WAAW,gBACd,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ,KAAK,WAAW;oBACd,QACE,gBACE,WAAW,EAAC,yDAAyD,EACrE,KAAK,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,MAAM,EAC5B,UAAU,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAC9E,SAAS,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAClF,YAAY,EAAC,gBAAgB,EAC7B,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,EACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,gBACX,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ,KAAK,WAAW;oBACd,QACE,gBACE,WAAW,EAAC,yDAAyD,EACrE,KAAK,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,MAAM,EAC5B,UAAU,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAC9E,SAAS,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAClF,YAAY,EAAC,gBAAgB,EAC7B,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,EACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ,gBACX,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ,KAAK,MAAM;oBACT,QACE,gBACE,WAAW,EAAC,yDAAyD,EACrE,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,IAAI,EACtB,KAAK,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,IAAI,EAC1B,UAAU,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAC5E,SAAS,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EAChF,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,gBACX,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ,KAAK,OAAO;oBACV,QACE,iBACE,WAAW,EAAC,sKAAsK,EAClL,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,EACvB,YAAY,EAAE,gBAAgB,EAC9B,KAAK,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,KAAK,EAC3B,UAAU,EAAE,CAAC,CAAM,eAAK,OAAA,IAAI,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,KAAI,MAAA,CAAC,CAAC,MAAM,0CAAE,KAAK,CAAA,IAAI,IAAI,EAAE,CAAC,CAAA,EAAA,EAChG,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,MAAM,sBACM,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ,KAAK,UAAU;oBACb,QACE,gBACE,WAAW,EAAC,yDAAyD,EACrE,WAAW,EAAE,KAAK,CAAC,KAAK,EACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,0CAAE,WAAW,EAC7B,UAAU,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EACnF,SAAS,EAAE,CAAC,CAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC,EACvF,YAAY,EAAE,aAAa,EAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,WAAW,EACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,MAAK,IAAI,GAAG,CAAC,GAAG,IAAI,gBACxC,KAAK,CAAC,KAAK,KACnB,YAAY,GAChB,EACF;gBAEJ;oBACE,OAAO,IAAI,CAAC;aACf;SACF,CAAC,CACc,EAEjB,IAAI,CAAC,OAAO,IAAI,mBAAa,WAAW,EAAC,0CAA0C,GAAe,CAC/F,EACN;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["i18nState"],"sources":["src/functions/address-settings.ts","src/store/i18n/store.ts","src/components/ui/address/sc-address.scss?tag=sc-address&encapsulation=shadow","src/components/ui/address/sc-address.tsx"],"sourcesContent":["/**\n * Internal dependencies.\n */\nimport { CountryLocaleField, CountryLocaleFieldValue } from 'src/types';\n\nexport function sortAddressFields(countryCode: string, defaultCountryFields: Array<CountryLocaleFieldValue>, countryFields: Array<CountryLocaleField>) {\n  const fields = defaultCountryFields || [];\n  const fieldsByCountry = countryFields || {};\n\n  if (countryCode && fieldsByCountry?.[countryCode]) {\n    fields.forEach(field => {\n      if (fieldsByCountry?.[countryCode]?.[field?.name]) {\n        const countryField = fieldsByCountry[countryCode][field.name];\n        field.priority = countryField?.priority || field?.priority;\n        field.label = countryField?.label || field?.label;\n      }\n    });\n  }\n\n  return fields.sort((a, b) => a.priority - b.priority);\n}\n","/**\n * External dependencies.\n */\nimport { createStore } from '@stencil/store';\n\n/**\n * Internal dependencies.\n */\nimport { CountryLocaleField, CountryLocaleFieldValue } from '../../types';\nimport { getSerializedState } from '@store/utils';\n\nconst { i18n } = getSerializedState();\n\ninterface Store {\n  countryFields: Array<CountryLocaleField>;\n  defaultCountryFields: Array<CountryLocaleFieldValue>;\n}\n\nconst { state, onChange, on, set, get, dispose } = createStore<Store>(\n  {\n    countryFields: [],\n    defaultCountryFields: [],\n    ...i18n,\n  },\n  (newValue, oldValue) => {\n    return JSON.stringify(newValue) !== JSON.stringify(oldValue);\n  },\n);\n\nexport default state;\nexport { state, onChange, on, set, get, dispose };\n",":host {\n  display: block;\n}\n\n.sc-address {\n  display: block;\n  position: relative;\n\n  [hidden] {\n    display: none;\n  }\n\n  &--loading {\n    min-height: 230px;\n  }\n\n  sc-skeleton {\n    display: block;\n    margin-bottom: 1em;\n  }\n\n  &__control {\n    display: block;\n\n    > * {\n      margin-bottom: var(--sc-address-column-spacing, -1px);\n    }\n  }\n\n  &__columns {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: space-between;\n\n    > * {\n      flex: 1;\n      width: 50%;\n      margin-right: var(--sc-address-column-spacing, -1px);\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { hasCity, hasPostal, countryChoices } from '../../../functions/address';\nimport { reportChildrenValidity } from '../../../functions/form-data';\nimport { Address, CountryLocaleField, CountryLocaleFieldValue } from '../../../types';\nimport { sortAddressFields } from 'src/functions/address-settings';\nimport { state as i18nState } from '@store/i18n';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-address',\n  styleUrl: 'sc-address.scss',\n  shadow: true,\n})\nexport class ScAddress {\n  @Element() el: HTMLScAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    name: 'shipping_name',\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  /** Is this loading?  */\n  @Prop() loading: boolean = false;\n\n  /** Is this disabled? */\n  @Prop() disabled: boolean;\n\n  /** The label for the field. */\n  @Prop() label: string;\n\n  /** Should we show name field? */\n  @Prop({ reflect: true, mutable: true }) showName: boolean;\n\n  /** Should we show name field? */\n  @Prop() showLine2: boolean;\n\n  /** Is this required? */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Is the name required */\n  @Prop({ reflect: true }) requireName: boolean = false;\n\n  /** Default country fields */\n  @Prop({ mutable: true }) defaultCountryFields: Array<CountryLocaleFieldValue>;\n\n  /** Country fields by country code */\n  @Prop({ mutable: true }) countryFields: Array<CountryLocaleField>;\n\n  /** Should we show the city field? */\n  @State() showCity: boolean = true;\n\n  /** Should we show the postal field? */\n  @State() showPostal: boolean = true;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address change event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address?.country) return;\n    this.setRegions();\n    this.showPostal = hasPostal(this.address.country);\n    this.showCity = hasCity(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  @Watch('requireName')\n  handleNameChange() {\n    if (this.requireName) {\n      this.showName = true;\n    }\n  }\n\n  decodeHtmlEntities(html: string) {\n    return new DOMParser().parseFromString(html, 'text/html')?.body.textContent || html;\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      name: this.address?.name,\n      country: null,\n      city: null,\n      line_1: null,\n      line_2: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    import('country-region-data').then(module => {\n      this.regions = (module?.[this.address.country]?.[2] || []).map(region => ({\n        value: region[1],\n        label: this.decodeHtmlEntities(region[0]),\n      }));\n\n      if ( window?.wp?.hooks?.applyFilters ) {\n        this.regions = window.wp.hooks.applyFilters('surecart_address_regions', this.regions, this.address.country) as Array<{ value: string; label: string }>;\n      }\n    });\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address?.country)?.value || null;\n\n    // Set default country fields.\n    this.defaultCountryFields = this.defaultCountryFields || i18nState.defaultCountryFields || [];\n    this.countryFields = this.countryFields || i18nState.countryFields || [];\n\n    this.updateAddress({ country });\n    this.handleNameChange();\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  /**\n   * Compute and return the sorted fields based on current country, defaultCountryFields and countryFields.\n   * This method can be used as a computed property.\n   */\n  sortedFields(): Array<CountryLocaleFieldValue> {\n    const countrySpecificFields = this.countryFields?.[this.address?.country] || {};\n    const mergedCountryFields = (this.defaultCountryFields || []).map(field => {\n      if (countrySpecificFields[field.name]) {\n        return {\n          ...field,\n          ...countrySpecificFields[field.name],\n        };\n      }\n      return field;\n    });\n\n    return sortAddressFields(this.address?.country, mergedCountryFields, this.countryFields);\n  }\n\n  getRoundedProps(index: number, length: number) {\n    const isFirst = index === 0;\n    const isLast = index === length - 1;\n\n    return {\n      squaredTop: isLast,\n      squaredBottom: isFirst,\n      squared: !isLast && !isFirst,\n    };\n  }\n\n  render() {\n    const visibleFields = (this.sortedFields() ?? []).filter(field => {\n      switch (field.name) {\n        case 'name':\n          return this.showName;\n        case 'address_2':\n          return this.showLine2 || !!this?.address?.line_2?.length;\n        case 'city':\n          return this.showCity;\n        case 'state':\n          return !!this?.regions?.length && !!this?.address?.country;\n        case 'postcode':\n          return this.showPostal;\n        default:\n          return true;\n      }\n    });\n\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control label={this.label} exportparts=\"label, help-text, form-control\" class=\"sc-address__control\" required={this.required}>\n          {visibleFields.map((field: any, index: number) => {\n            const roundedProps = this.getRoundedProps(index, visibleFields.length);\n\n            switch (field.name) {\n              case 'country':\n                return (\n                  <sc-select\n                    exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n                    part=\"name__input\"\n                    value={this.address?.country}\n                    onScChange={(e: any) => {\n                      if (e.target.value === this.address?.country) return;\n                      this.clearAddress();\n                      this.updateAddress({ country: e.target.value });\n                    }}\n                    choices={this.countryChoices}\n                    autocomplete={'country-name'}\n                    placeholder={field.label}\n                    name={this.names?.country}\n                    search\n                    unselect={false}\n                    disabled={this.disabled}\n                    required={this.required}\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              case 'name':\n                return (\n                  <sc-input\n                    exportparts=\"base:input__base, input, form-control, label, help-text\"\n                    value={this?.address?.name}\n                    onScChange={(e: any) => this.updateAddress({ name: e.target.value || null })}\n                    onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n                    autocomplete=\"street-address\"\n                    placeholder={field.label}\n                    name={this.names?.name}\n                    disabled={this.disabled}\n                    required={this.requireName}\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              case 'address_1':\n                return (\n                  <sc-input\n                    exportparts=\"base:input__base, input, form-control, label, help-text\"\n                    value={this?.address?.line_1}\n                    onScChange={(e: any) => this.updateAddress({ line_1: e.target.value || null })}\n                    onScInput={(e: any) => this.handleAddressInput({ line_1: e.target.value || null })}\n                    autocomplete=\"street-address\"\n                    placeholder={field.label}\n                    name={this.names?.line_1}\n                    disabled={this.disabled}\n                    required={this.required}\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              case 'address_2':\n                return (\n                  <sc-input\n                    exportparts=\"base:input__base, input, form-control, label, help-text\"\n                    value={this?.address?.line_2}\n                    onScChange={(e: any) => this.updateAddress({ line_2: e.target.value || null })}\n                    onScInput={(e: any) => this.handleAddressInput({ line_2: e.target.value || null })}\n                    autocomplete=\"street-address\"\n                    placeholder={field.label}\n                    name={this.names?.line_2}\n                    disabled={this.disabled}\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              case 'city':\n                return (\n                  <sc-input\n                    exportparts=\"base:input__base, input, form-control, label, help-text\"\n                    placeholder={field.label}\n                    name={this.names?.city}\n                    value={this?.address?.city}\n                    onScChange={(e: any) => this.updateAddress({ city: e.target.value || null })}\n                    onScInput={(e: any) => this.handleAddressInput({ city: e.target.value || null })}\n                    required={this.required}\n                    disabled={this.disabled}\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              case 'state':\n                return (\n                  <sc-select\n                    exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n                    placeholder={field.label}\n                    name={this.names?.state}\n                    autocomplete={'address-level1'}\n                    value={this?.address?.state}\n                    onScChange={(e: any) => this.updateAddress({ state: e.target.value || e.detail?.value || null })}\n                    choices={this.regions}\n                    required={this.required}\n                    disabled={this.disabled}\n                    search\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              case 'postcode':\n                return (\n                  <sc-input\n                    exportparts=\"base:input__base, input, form-control, label, help-text\"\n                    placeholder={field.label}\n                    name={this.names?.postal_code}\n                    onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                    onScInput={(e: any) => this.handleAddressInput({ postal_code: e.target.value || null })}\n                    autocomplete={'postal-code'}\n                    required={this.required}\n                    value={this?.address?.postal_code}\n                    disabled={this.disabled}\n                    maxlength={this.address?.country === 'US' ? 5 : null}\n                    aria-label={field.label}\n                    {...roundedProps}\n                  />\n                );\n\n              default:\n                return null;\n            }\n          })}\n        </sc-form-control>\n\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n"],"version":3}